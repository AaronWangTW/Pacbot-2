package main

// Encoded in little endian form (column 0 would be at bit 0)
var pellets []uint32 = []uint32{
	// col:                    8 6 4 2 0
	0b0000_00000000000000_00000000000000, // row 0
	0b0000_01111111111110_01111111111110, // row 1
	0b0000_01000010000010_01000001000010, // row 2
	0b0000_01000010000010_01000001000010, // row 3
	0b0000_01000010000010_01000001000010, // row 4
	0b0000_01111111111111_11111111111110, // row 5
	0b0000_01000010010000_00001001000010, // row 6
	0b0000_01000010010000_00001001000010, // row 7
	0b0000_01111110011110_01111001111110, // row 8
	0b0000_00000010000010_01000001000000, // row 9
	0b0000_00000010000010_01000001000000, // row 10
	0b0000_00000010011111_11111001000000, // row 11
	0b0000_00000010010000_00001001000000, // row 12
	0b0000_00000010010000_00001001000000, // row 13
	0b0000_00000011110000_00001111000000, // row 14
	0b0000_00000010010000_00001001000000, // row 15
	0b0000_00000010010000_00001001000000, // row 16
	0b0000_00000010011111_11111001000000, // row 17
	0b0000_00000010010000_00001001000000, // row 18
	0b0000_00000010010000_00001001000000, // row 19
	0b0000_01111111111110_01111111111110, // row 20
	0b0000_01000010000010_01000001000010, // row 21
	0b0000_01000010000010_01000001000010, // row 22
	0b0000_01110011111111_11111111001110, // row 23
	0b0000_00010010010000_00001001001000, // row 24
	0b0000_00010010010000_00001001001000, // row 25
	0b0000_01111110011110_01111001111110, // row 26
	0b0000_01000000000010_01000000000010, // row 27
	0b0000_01000000000010_01000000000010, // row 28
	0b0000_01111111111111_11111111111110, // row 29
	0b0000_00000000000000_00000000000000, // row 30
}

// Serializes in big-endian form (most significant byte first)
func serializePellets(_pellets []uint32) []byte {
	ret := make([]byte, 124)
	for row := 0; row < 31; row++ {
		for byte_num := 0; byte_num < 4; byte_num++ {
			ret[row*4+byte_num] = byte((_pellets[row] >> (8 * (3 - byte_num))) & 0xff)
		}
	}
	return ret
}
