package game

// Encoded in little endian form (column 0 would be at bit 0)
var Pellets [31]uint32 = [...]uint32{
	//                middle
	// col:             vv    8 6 4 2 0
	0b0000_0000000000000000000000000000, // row 0
	0b0000_0111111111111001111111111110, // row 1
	0b0000_0100001000001001000001000010, // row 2
	0b0000_0100001000001001000001000010, // row 3
	0b0000_0100001000001001000001000010, // row 4
	0b0000_0111111111111111111111111110, // row 5
	0b0000_0100001001000000001001000010, // row 6
	0b0000_0100001001000000001001000010, // row 7
	0b0000_0111111001111001111001111110, // row 8
	0b0000_0000001000000000000001000000, // row 9
	0b0000_0000001000000000000001000000, // row 10
	0b0000_0000001000000000000001000000, // row 11
	0b0000_0000001000000000000001000000, // row 12
	0b0000_0000001000000000000001000000, // row 13
	0b0000_0000001000000000000001000000, // row 14
	0b0000_0000001000000000000001000000, // row 15
	0b0000_0000001000000000000001000000, // row 16
	0b0000_0000001000000000000001000000, // row 17
	0b0000_0000001000000000000001000000, // row 18
	0b0000_0000001000000000000001000000, // row 19
	0b0000_0111111111111001111111111110, // row 20
	0b0000_0100001000001001000001000010, // row 21
	0b0000_0100001000001001000001000010, // row 22
	0b0000_0111001111111111111111001110, // row 23
	0b0000_0001001001000000001001001000, // row 24
	0b0000_0001001001000000001001001000, // row 25
	0b0000_0111111001111001111001111110, // row 26
	0b0000_0100000000001001000000000010, // row 27
	0b0000_0100000000001001000000000010, // row 28
	0b0000_0111111111111111111111111110, // row 29
	0b0000_0000000000000000000000000000, // row 30
}

// Encoded in little endian form (column 0 would be at bit 0)
var Walls [31]uint32 = [...]uint32{
	//                middle
	// col:             vv    8 6 4 2 0
	0b0000_1111111111111111111111111111, // row 0
	0b0000_1000000000000110000000000001, // row 1
	0b0000_1011110111110110111110111101, // row 2
	0b0000_1011110111110110111110111101, // row 3
	0b0000_1011110111110110111110111101, // row 4
	0b0000_1000000000000000000000000001, // row 5
	0b0000_1011110110111111110110111101, // row 6
	0b0000_1011110110111111110110111101, // row 7
	0b0000_1000000110000110000110000001, // row 8
	0b0000_1111110111110110111110111111, // row 9
	0b0000_1111110111110110111110111111, // row 10
	0b0000_1111110110000000000110111111, // row 11
	0b0000_1111110110111111110110111111, // row 12
	0b0000_1111110110111111110110111111, // row 13
	0b0000_1111110000111111110000111111, // row 14
	0b0000_1111110110111111110110111111, // row 15
	0b0000_1111110110111111110110111111, // row 16
	0b0000_1111110110000000000110111111, // row 17
	0b0000_1111110110111111110110111111, // row 18
	0b0000_1111110110111111110110111111, // row 19
	0b0000_1000000000000110000000000001, // row 20
	0b0000_1011110111110110111110111101, // row 21
	0b0000_1011110111110110111110111101, // row 22
	0b0000_1000110000000000000000110001, // row 23
	0b0000_1110110110111111110110110111, // row 24
	0b0000_1110110110111111110110110111, // row 25
	0b0000_1000000110000110000110000001, // row 26
	0b0000_1011111111110110111111111101, // row 27
	0b0000_1011111111110110111111111101, // row 28
	0b0000_1000000000000000000000000001, // row 29
	0b0000_1111111111111111111111111111, // row 30
}

// Serializes in big-endian form (most significant byte first)
func SerializePellets(_pellets [31]uint32) []byte {
	ret := make([]byte, 124)
	for row := 0; row < 31; row++ {
		for byte_num := 0; byte_num < 4; byte_num++ {
			ret[row*4+byte_num] = byte((_pellets[row] >> (8 * (3 - byte_num))) & 0xff)
		}
	}
	return ret
}
